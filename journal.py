import datetime
import psycopg2
from passlib.hash import pbkdf2_sha256

from contextlib import closing

from flask import Flask
from flask import g
from flask import render_template
from flask import abort
from flask import request
from flask import url_for
from flask import redirect
from flask import session
from flask.ext.sqlalchemy import SQLAlchemy

from pygments import highlight
from pygments.lexers import PythonLexer
from pygments.formatters import HtmlFormatter

import markdown

from models import Post
# -*- coding: utf-8 -*-


# add this just below the SQL table definition we just created
app = Flask(__name__)


app.config['DEBUG'] = True
app.config['SQLALCHEMY_DATABASE_URI'] = "postgresql://postgres:red@blog@localhost/john_blog"
db = SQLAlchemy(app)


DB_SCHEMA = """
DROP TABLE IF EXISTS entries;
CREATE TABLE entries (
    id serial PRIMARY KEY,
    title VARCHAR (127) NOT NULL,
    text TEXT NOT NULL,
    created TIMESTAMP NOT NULL
)
"""


DB_ENTRY_INSERT = """
INSERT INTO entries (title, text, created) VALUES (%s, %s, %s)
"""

# add this new SQL string below the others
DB_ENTRIES_LIST = """
SELECT id, title, text, created FROM entries ORDER BY created DESC
"""

DB_EDIT_ENTRY = """
SELECT id, title, text, created FROM entries WHERE id = %s
"""

DB_UPDATE_ENTRY = """
UPDATE entries
SET title=%s, text=%s
WHERE id=%s;
"""


@app.teardown_request
def teardown_request(exception):
    db = getattr(g, 'db', None)
    if db is not None:
        if exception and isinstance(exception, psycopg2.Error):
            db.rollback()
        else:
            db.commit()
        db.close()


def do_login(username='', passwd=''):
    if username != app.config['ADMIN_USERNAME']:
        raise ValueError
    if not pbkdf2_sha256.verify(passwd, app.config['ADMIN_PASSWORD']):
        raise ValueError
    session['logged_in'] = True


def colorize_text(user_input):
    return highlight(user_input, PythonLexer(), HtmlFormatter())


def markdown_text(user_input):
    return markdown.markdown(user_input, extensions=['codehilite'])


######################
# THE VIEW FUNCTIONS #
######################

@app.route('/')
def show_entries():
    entries = Post.query.all()
    return render_template('list_entries.html', entries=entries)


@app.route('/add', methods=['POST'])
def add_entry():
    try:
        write_entry(request.form['title'], request.form['text'])

    except psycopg2.Error:
        # this will catch any errors generated by the database
        abort(500)
    return redirect(url_for('show_ajax'))


@app.route('/<int:entryID>', methods=['GET'])
def view_entry(entryID=None):

    entry = get_one_entry(entryID)
    # print entry
    return render_template('entry.html', entry=entry)


@app.route('/edit/<int:entryID>', methods=['GET'])
def edit_entry(entryID=None):

    entry = get_one_entry(entryID)
    # print entry
    return render_template('edit.html', entry=entry)


@app.route('/update', methods=['POST'])
def update(entryID=None):

    entryID = entryID
    print entryID
    try:
        title = request.form['title']
        text = request.form['text']
        update_entry(title, text, entryID)
    except psycopg2.Error:
        # this will catch any errors generated by the database
        abort(500)
    return redirect(url_for('show_entries'))


@app.route('/login', methods=['GET', 'POST'])
def login():
    error = None
    if request.method == 'POST':
        try:
            do_login(request.form['username'].encode('utf-8'),
                     request.form['password'].encode('utf-8'))
        except ValueError:
            error = "Login Failed"
        else:
            return redirect(url_for('show_entries'))
    return render_template('login.html', error=error)


@app.route('/logout')
def logout():
    session.pop('logged_in', None)
    return redirect(url_for('show_entries'))


if __name__ == '__main__':
    app.run(debug=True)
