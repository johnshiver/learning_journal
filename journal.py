import psycopg2

from flask import Flask
from flask import render_template
from flask import abort
from flask import request
from flask import url_for
from flask import redirect

from models import User, update_entry, write_entry, get_all_entries, get_one_entry, db, delete_post
from forms import LoginForm

from flask.ext.login import LoginManager, login_required, login_user, logout_user


# -*- coding: utf-8 -*-


# add this just below the SQL table definition we just created

login_manager = LoginManager()

app = Flask(__name__)
app.config['DEBUG'] = True
app.config['SECRET_KEY'] = 'somereallylongstring'
login_manager.init_app(app)


######################
#   USER FUNCTIONS   #
######################

@login_manager.user_loader
def load_user(userid):
    try:
        u = User.query.filter_by(id=int(userid)).first()
    except psycopg2.Error:
        return None
    return u


@app.route('/login', methods=['GET', 'POST'])
# @login_required
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        print 'here we are, form validation'
        if user is not None and user.verify_password(form.password.data):
            login_user(user, form.remember_me.data)
            return redirect(request.args.get('next') or url_for('show_entries'))
        print 'Invalid username or password.'
    return render_template('login.html', form=form)


@app.route('/logout', methods=['GET', 'POST'])
def logout():
    logout_user()
    return redirect(url_for('show_entries'))

######################
# THE VIEW FUNCTIONS #
######################


@app.route('/')
def show_entries():
    entries = get_all_entries()
    return render_template('list_entries.html', entries=entries)


@app.route('/add_entry', methods=['GET'])
@login_required
def add_entry_form():
    return render_template('add_entry.html')


@app.route('/add', methods=['POST'])
@login_required
def add_entry():
    try:
        write_entry(title=request.form['title'], body=request.form['text'])
        return redirect(url_for('show_entries'))
    except psycopg2.Error:
        # this will catch any errors generated by the database
        abort(500)


@app.route('/<int:entryID>', methods=['GET'])
def view_entry(entryID=None):

    entry = get_one_entry(entryID)
    return render_template('entry.html', entry=entry)


@app.route('/edit/<int:entryID>', methods=['GET'])
@login_required
def edit_entry(entryID=None):

    entry = get_one_entry(entryID)
    return render_template('edit.html', entry=entry)


@app.route('/delete/<int:entryID>', methods=['GET', 'POST', 'DELETE'])
@login_required
def delete_entry(entryID=None):

    try:
        delete_post(entryID)
    except psycopg2.Error:
        # this will catch any errors generated by the database
        abort(500)
    return redirect(url_for('show_entries'))


@app.route('/update', methods=['GET', 'POST'])
@login_required
def update():

    try:
        title = request.form['title']
        text = request.form['text']
        id = request.form['id']
        update_entry(title, text, id)
    except psycopg2.Error:
        # this will catch any errors generated by the database
        abort(500)
    return redirect(url_for('show_entries'))

if __name__ == '__main__':
    app.run(debug=True)